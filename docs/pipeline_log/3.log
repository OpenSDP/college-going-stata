
<span class="stcmt">// Overall Progression</span>

<span class="stcmt">// Step 1: Load the college-going analysis file into Stata</span>
use "$data/college_going_analysis", clear

<span class="stcmt">// Step 2: Keep students in ninth grade cohorts you can observe persisting to the second year of college</span>
local chrt_ninth_begin = ${chrt_ninth_begin_persist_yr2}
local chrt_ninth_end = ${chrt_ninth_end_persist_yr2}
keep if (chrt_ninth &gt;= `chrt_ninth_begin' &amp; chrt_ninth &lt;= `chrt_ninth_end')

<span class="stcmt">// Step 3: Create variables for the outcomes "regular diploma recipients", "seamless transitioners" and "second year persisters"</span>
gen grad = (!mi(chrt_grad) &amp; ontime_grad == 1)
gen seamless_transitioners_any = (enrl_1oct_ninth_yr1_any == 1 &amp; ontime_grad == 1)
gen second_year_persisters = (enrl_1oct_ninth_yr1_any == 1 &amp; enrl_1oct_ninth_yr2_any == 1 &amp; ontime_grad == 1)

<span class="stcmt">// Step 4: Create agency-level average outcomes</span>
<span class="stcmt">// 1. Preserve the data (to work with the data in its existing structure later on)</span>
preserve

<span class="stcmt">// 2. Calculate the mean of each outcome variable by agency</span>
	collapse (mean) grad seamless_transitioners_any second_year_persisters (count) N = sid

<span class="stcmt">// 3. Create a string variable called school_name equal to "${agency_name} Average"</span>
	gen school_name = "${agency_name} AVERAGE"

<span class="stcmt">// 4. Save this data as a temporary file</span>
	tempfile agency_level
	save `agency_level'

<span class="stcmt">// 5. Restore the data to the original form</span>
restore

<span class="stcmt">// Step 5: Create school-level maximum and minimum outcomes</span>
<span class="stcmt">// 1. Create a variable school_name that takes on the value of students“†first high school attended</span>
gen school_name = first_hs_name
<span class="stcmt">// 2. Calculate the mean of each outcome variable by first high school attended</span>
collapse (mean) grad seamless_transitioners second_year_persisters (count) N = sid, by(school_name)

<span class="stcmt">// 3. Identify the agency maximum values for each of the three outcome variables</span>
preserve
	collapse (max) grad seamless_transitioners_any second_year_persisters (count) N
	gen school_name = "${agency_name} MAX HS"

	tempfile agency_max
	save `agency_max'
restore

<span class="stcmt">// 4. Identify the agency minimum values for each of the three outcome variables</span>
preserve
	collapse (min) grad seamless_transitioners_any second_year_persisters (count) N
	gen school_name = "${agency_name} MIN HS"

	tempfile agency_min
	save `agency_min'
restore

<span class="stcmt">// 5. Append the three tempfiles to the school-level file loaded into Stata</span>
append using `agency_level'
append using `agency_max'
append using `agency_min'

<span class="stcmt">// Step 6: Format the outcome variables so they read as percentages in the graph</span>
foreach var of varlist grad seamless_transitioners_any second_year_persisters {
	replace `var' = (`var' * 100)
	format `var' %9.1f
}

<span class="stcmt">// Step 7: Reformat the data file so that one variable contains all the outcomes of interest</span>
<span class="stcmt">// 1. Create 4 observations for each school: ninth grade, hs graduation, seamless college transition and second-year persistence</span>
foreach i of numlist 1/4 {
	gen time`i' = `i'
}

<span class="stcmt">// 2. Reshape the data file from wide to long</span>
reshape long time , i(school_name N)
drop _j

<span class="stcmt">// 3. Create a single variable that takes on all the outcomes of interest</span>
bysort school_name: gen outcome = 100 if time == 1
bysort school_name: replace outcome = grad if time == 2
bysort school_name: replace outcome = seamless_transitioners_any if time == 3
bysort school_name: replace outcome = second_year_persisters if time == 4
format outcome %9.1f

<span class="stcmt">// Step 8: Prepare to graph the results</span>
<span class="stcmt">// 1. Label the outcome</span>
label define outcome 1 "Ninth Graders" 2 "On-time Graduates" <span class="stcmt">///</span>
3 "Seamless College Transitioners" 4 "Second Year Persisters"
label values time outcome

<span class="stcmt">// 2. Generate a cohort label to be used in the footnote for the graph</span>
local temp_begin = `chrt_ninth_begin'-1
local temp_end = `chrt_ninth_end'-1
if `chrt_ninth_begin'==`chrt_ninth_end' {
		local chrt_label "`temp_begin'-`chrt_ninth_begin'"
}
else {
		local chrt_label "`temp_begin'-`chrt_ninth_begin' through `temp_end'-`chrt_ninth_end'"
}

<span class="stcmt">// Step 9: Graph the results</span>
#delimit ;
twoway (connected outcome time if school_name == "${agency_name} AVERAGE",
		sort lcolor(dkorange) mlabel(outcome) mlabc(black) mlabs(vsmall) mlabp(12)
		mcolor(dknavy) msymbol(circle) msize(small))
		(connected outcome time if school_name == "${agency_name} MAX HS", sort lcolor(black)
		lpattern(dash) mlabel(outcome) mlabs(vsmall) mlabp(12) mlabc(black)
		mcolor(black) msize(small))
		(connected outcome time if school_name == "${agency_name} MIN HS", sort lcolor(blue)
		lpattern(dash) mlabel(outcome) mlabs(vsmall) mlabp(12) mlabc(black)
		mcolor(black) msize(small)),
title("Student Progression from Ninth Grade Through College", size(medium))
		subtitle("${agency_name} Average", size(medsmall))
		xscale(range(.8(.2)4.2))
		xtitle("") xlabel(1 2 3 4 , valuelabels labsize(vsmall))
		ytitle("Percent of Ninth Graders")
		yscale(range(0(20)100))
		ylabel(0(20)100, nogrid)
legend(col(1) position(2) size(vsmall)
		label(1 "${agency_name} Average")
		label(2 "${agency_name} Max HS")
		label(3 "${agency_name} Min HS")
		ring(0) region(lpattern(none) lcolor(none) fcolor(none)))
graphregion(color(white) fcolor(white) lcolor(white))
plotregion(color(white) fcolor(white) lcolor(white))
note(" " "Sample: `chrt_label' ${agency_name} first-time ninth graders." "Postsecondary enrollment outcomes from NSC matched records. All other data from ${agency_name} administrative records.", size(vsmall));
#delimit cr

graph export "$figures/A1_Overall_Progression.png", replace width(1600) height(1200)
